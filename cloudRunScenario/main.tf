
# This file is autogenerated. Do not edit this file directly.
# Please make changes to the application template instead.

module "frontend-service-cloud-run" {
  source                        = "github.com/GoogleCloudPlatform/terraform-google-cloud-run//modules/v2?ref=v0.17.2"
  project_id                    = "kb-workspace"
  location                      = "us-central1"
  service_name                  = var.frontend-service-cloud-run_service_name
  containers                    = [{"container_image" = "gcr.io/design-center-container-repo/three-tier-app-fe:latest-02012025", "container_name" = "", "env_vars" = {"backend_service_cloud_run_SERVICE_ENDPOINT" = module.backend-service-cloud-run.service_uri}, "ports" = {"container_port" = 80, "name" = "http1"}, "resources" = {"cpu_idle" = true, "startup_cpu_boost" = false}}]
  service_account_project_roles = ["roles/run.invoker"]
  members                       = ["allUsers"]
  vpc_access = {
    egress = "ALL_TRAFFIC"
    network_interfaces = {
      network    = "default"
      subnetwork = "default"
    }
  }
  cloud_run_deletion_protection = false
  enable_prometheus_sidecar     = true
  depends_on                    = [module.project-services-kb-workspace, module.project-services-billing-project]
}
module "backend-service-cloud-run" {
  source                        = "github.com/GoogleCloudPlatform/terraform-google-cloud-run//modules/v2?ref=v0.17.2"
  project_id                    = var.backend-service-cloud-run_project_id
  location                      = "us-central1"
  service_name                  = var.backend-service-cloud-run_service_name
  containers                    = [{"container_image" = "gcr.io/design-center-container-repo/three-tier-app-be:latest-06022025", "container_name" = "service-container", "env_vars" = merge({"database_postgresql_CLOUD_SQL_DATABASE_CONNECTION_NAME" = module.database-postgresql.instance_connection_name, "database_postgresql_CLOUD_SQL_DATABASE_HOST" = module.database-postgresql.instance_first_ip_address, "database_postgresql_CLOUD_SQL_DATABASE_NAME" = module.database-postgresql.env_vars.CLOUD_SQL_DATABASE_NAME}, {"memorystore_REDIS_AUTH_STRING" = module.memorystore.auth_string, "memorystore_REDIS_HOST" = module.memorystore.host, "memorystore_REDIS_PORT" = module.memorystore.env_vars.REDIS_PORT}), "ports" = {"container_port" = 80}}]
  service_account_project_roles = concat(["roles/cloudsql.instanceUser", "roles/cloudsql.client"], ["roles/redis.editor"])
  members                       = ["allUsers"]
  vpc_access = {
    egress = "PRIVATE_RANGES_ONLY"
    network_interfaces = {
      network    = "default"
      subnetwork = "default"
    }
  }
  cloud_run_deletion_protection = false
  enable_prometheus_sidecar     = true
  volumes                       = []
}
module "database-postgresql" {
  source                      = "github.com/terraform-google-modules/terraform-google-sql-db//modules/postgresql?ref=v25.2.2"
  project_id                  = var.database-postgresql_project_id
  region                      = "us-central1"
  name                        = var.database-postgresql_name
  edition                     = "ENTERPRISE_PLUS"
  database_version            = "POSTGRES_14"
  availability_type           = "REGIONAL"
  db_name                     = "database"
  enable_default_user         = false
  deletion_protection         = false
  database_flags              = [{"name" = "cloudsql.iam_authentication", "value" = "on"}]
  database_deletion_policy    = "ABANDON"
  user_deletion_policy        = "ABANDON"
  data_cache_enabled          = true
  tier                        = "db-perf-optimized-N-8"
  deletion_protection_enabled = false
  disk_autoresize             = true
  backup_configuration = {
    enabled                        = true
    point_in_time_recovery_enabled = true
  }
  iam_users = [{
    email = module.backend-service-cloud-run.service_account_id.email
    id    = module.backend-service-cloud-run.service_account_id.id
    type  = "CLOUD_IAM_SERVICE_ACCOUNT"
  }]
}
module "memorystore" {
  source                  = "github.com/terraform-google-modules/terraform-google-memorystore?ref=v13.3.0"
  project_id              = var.memorystore_project_id
  region                  = "us-central1"
  name                    = var.memorystore_name
  tier                    = "BASIC"
  redis_version           = "REDIS_6_X"
  connect_mode            = "DIRECT_PEERING"
  auth_enabled            = true
  transit_encryption_mode = "DISABLED"
}
module "apphub" {
  source         = "github.com/GoogleCloudPlatform/terraform-google-apphub?ref=v0.3.0"
  project_id     = var.apphub_project_id
  location       = var.apphub_location
  service_uris   = concat([module.frontend-service-cloud-run.apphub_service_uri], [module.backend-service-cloud-run.apphub_service_uri], [module.database-postgresql.apphub_service_uri], [module.memorystore.apphub_service_uri])
  application_id = var.apphub_application_id
}
module "project-services-kb-workspace" {
  source                      = "github.com/terraform-google-modules/terraform-google-project-factory//modules/project_services?ref=v17.1.0"
  project_id                  = "kb-workspace"
  disable_services_on_destroy = false
  activate_apis               = ["compute.googleapis.com", "cloudresourcemanager.googleapis.com", "storage-api.googleapis.com", "cloudkms.googleapis.com", "iam.googleapis.com", "accesscontextmanager.googleapis.com", "serviceusage.googleapis.com", "run.googleapis.com", "cloudbilling.googleapis.com", "monitoring.googleapis.com"]
}
module "project-services-billing-project" {
  source                      = "github.com/terraform-google-modules/terraform-google-project-factory//modules/project_services?ref=v17.1.0"
  project_id                  = "kb-workspace"
  disable_services_on_destroy = false
  activate_apis               = ["workflows.googleapis.com", "memorystore.googleapis.com", "apphub.googleapis.com", "cloudkms.googleapis.com", "serviceconsumermanagement.googleapis.com", "compute.googleapis.com", "redis.googleapis.com", "iam.googleapis.com", "run.googleapis.com", "cloudbilling.googleapis.com", "memcache.googleapis.com", "serviceusage.googleapis.com", "storage-api.googleapis.com", "monitoring.googleapis.com", "accesscontextmanager.googleapis.com", "cloudscheduler.googleapis.com", "networkconnectivity.googleapis.com", "cloudresourcemanager.googleapis.com", "servicenetworking.googleapis.com", "sqladmin.googleapis.com"]
}
